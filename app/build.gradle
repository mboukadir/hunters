apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'

apply plugin: 'jacoco'
apply from: "${rootDir}/code_quality/android-sonarqube.gradle"

// Manifest version information!
def versionMajor = 0
def versionMinor = 0
def versionPatch = 1
def versionBuild = 0

android {
    namespace 'com.mb.hunters'

    compileSdkVersion 31

    defaultConfig {
        applicationId "com.mb.hunters"
        minSdkVersion 21
        targetSdkVersion 31

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        buildConfigField "String", "PROCUCT_HUNT_DEVELOPER_TOKEN", "\"" + propOrDef("PROCUCT_HUNT_DEVELOPER_TOKEN", "") + "\""


        testInstrumentationRunner "com.mb.hunters.TestRunner"
    }


    signingConfigs {
        releaseConfig {
            //TODO

        }

        debugConfig {
            keyAlias 'debug'
            keyPassword 'p@ssw0rd'
            storePassword 'p@ssw0rd'
            storeFile rootProject.file("signing/app-debug.keystore")
        }
    }

    buildTypes {

        debug {
            // Enabling multidex support.
            signingConfig signingConfigs.debugConfig
            applicationIdSuffix '.debug'
            versionNameSuffix "-debug [${getGitHash()}]"
            //http://tools.android.com/tech-docs/new-build-system/built-in-shrinker
            //shrinkResources false
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
        }

        release {
            signingConfig null
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11
        allWarningsAsErrors = true
    }

    buildFeatures {
        compose true
        viewBinding true

    }

    composeOptions {
        kotlinCompilerExtensionVersion compose_version
    }

    packagingOptions {
        resources {
            excludes += ['LICENSE.txt']
        }
    }

    lint {
        abortOnError false
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation("androidx.activity:activity-ktx:1.4.0")
    implementation "androidx.activity:activity-compose:1.4.0"
    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:1.0.0-alpha07"

    implementation "androidx.compose.runtime:runtime:$compose_version"
    implementation "androidx.compose.ui:ui:$compose_version"
    implementation "androidx.compose.foundation:foundation-layout:$compose_version"
    implementation "androidx.compose.material:material:$compose_version"
    implementation "androidx.compose.material3:material3:1.0.0-alpha04"
    implementation "androidx.compose.material:material-icons-extended:$compose_version"
    implementation "androidx.compose.foundation:foundation:$compose_version"
    implementation "androidx.compose.animation:animation:$compose_version"
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"

    implementation "androidx.navigation:navigation-compose:2.5.0-alpha01"
    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'


    implementation "com.google.accompanist:accompanist-insets:0.21.5-rc"
    implementation "com.google.accompanist:accompanist-swiperefresh:0.21.5-rc"

    implementation("io.coil-kt:coil-compose:1.4.0")

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.6.0-alpha02'
    implementation 'androidx.recyclerview:recyclerview:1.2.1'
    implementation 'androidx.browser:browser:1.4.0'

    implementation "androidx.constraintlayout:constraintlayout:${constraintLayout_version}"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${lifecycle_version}"

    implementation "androidx.room:room-runtime:${room_version}"
    implementation "androidx.room:room-ktx:${room_version}"
    kapt "androidx.room:room-compiler:${room_version}"

    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    implementation "com.squareup.retrofit2:retrofit:${retrofit_version}"
    implementation "com.squareup.retrofit2:converter-moshi:${retrofit_version}"
    implementation "com.squareup.okhttp3:okhttp:${okhttp_version}"
    implementation "com.squareup.moshi:moshi:${moshi_version}"
    implementation "com.squareup.moshi:moshi-kotlin:${moshi_version}"
    implementation "com.squareup.moshi:moshi-adapters:${moshi_version}"

    implementation 'com.jakewharton.timber:timber:5.0.1'

    implementation 'com.github.bumptech.glide:glide:4.11.0'

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-rx2:$coroutines_version"


    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${leakcanary_version}"

    debugImplementation "com.squareup.retrofit2:retrofit-mock:${retrofit_version}"
    implementation "com.squareup.okhttp3:logging-interceptor:${okhttp_version}"

    // Dependencies for local unit tests
    testImplementation "junit:junit:${junit_version}"
    testImplementation "org.mockito:mockito-core:${mockito_version}"
    testImplementation "org.hamcrest:hamcrest-all:${hamcrest_version}"
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"

    testImplementation "com.google.truth:truth:1.1.3"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"

}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        // Treat all Kotlin warnings as errors
        allWarningsAsErrors = false
        freeCompilerArgs += '-Xopt-in=kotlin.RequiresOptIn'
        // Enable experimental coroutines APIs, including Flow
        freeCompilerArgs += '-Xopt-in=kotlin.Experimental'

        // Set JVM target to 11
        jvmTarget = JavaVersion.VERSION_11
    }
}

def getGitHash() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

String propOrDef(String propertyName, String defaultValue) {
    def propertyValue = project.properties[propertyName]
    return propertyValue != null ? propertyValue : defaultValue
}