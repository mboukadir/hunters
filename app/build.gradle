apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'com.getkeepsafe.dexcount'
dexcount {
  // Only run the method counter on CI
  runOnEachPackage = ci
}

apply plugin: 'com.diffplug.gradle.spotless'
spotless {
  kotlin {
    target "**/*.kt"
    ktlint(ktlint_version)
    licenseHeaderFile '../spotless/copyright.kt'
  }
}

// Manifest version information!
def versionMajor = 0
def versionMinor = 0
def versionPatch = 1
def versionBuild = 0

android {
  compileSdkVersion 28
  buildToolsVersion '28.0.3'

  defaultConfig {
    applicationId "com.mb.hunters"
    minSdkVersion 21
    targetSdkVersion 28

    versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
    versionName "${versionMajor}.${versionMinor}.${versionPatch}"

    buildConfigField "String", "PROCUCT_HUNT_DEVELOPER_TOKEN", "\"" + propOrDef("PROCUCT_HUNT_DEVELOPER_TOKEN", "") + "\""


    testInstrumentationRunner "com.mb.hunters.TestRunner"
  }


  signingConfigs {
    releaseConfig {
      //TODO

    }

    debugConfig {
      keyAlias 'debug'
      keyPassword 'p@ssw0rd'
      storePassword 'p@ssw0rd'
      storeFile rootProject.file("signing/app-debug.keystore")
    }
  }

  buildTypes {

    debug {
      // Enabling multidex support.
      signingConfig signingConfigs.debugConfig
      applicationIdSuffix '.debug'
      versionNameSuffix "-debug [${getGitHash()}]"
      //http://tools.android.com/tech-docs/new-build-system/built-in-shrinker
      //shrinkResources false
      minifyEnabled false
      useProguard false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      testProguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguardTest-rules.pro'
    }

    release {
      signingConfig null
      shrinkResources true
      minifyEnabled true
      useProguard true
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  dexOptions {
    // Don't pre-dex on CI
    preDexLibraries !ci
  }

  packagingOptions {
    exclude 'LICENSE.txt'
    exclude 'META-INF/rxjava.properties'
  }
}

androidExtensions {
  experimental = true
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])

  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"


  implementation """com.android.support:support-v4:${support_lib_version}"""
  implementation "com.android.support:appcompat-v7:${support_lib_version}"
  implementation "com.android.support:design:${support_lib_version}"
  implementation "com.android.support:recyclerview-v7:${support_lib_version}"
  implementation "com.android.support:customtabs:${support_lib_version}"


  implementation "com.android.support.constraint:constraint-layout:${constraint_layout_version}"


  implementation "android.arch.lifecycle:runtime:${arch_component_lifecycle_version}"
  implementation "android.arch.lifecycle:extensions:${arch_component_lifecycle_version}"
  implementation "android.arch.lifecycle:reactivestreams:${arch_component_lifecycle_version}"
  kapt "android.arch.lifecycle:compiler:${arch_component_lifecycle_version}"

  implementation "android.arch.persistence.room:runtime:${arch_component_room_version}"
  implementation "android.arch.persistence.room:rxjava2:${arch_component_room_version}"
  kapt "android.arch.persistence.room:compiler:1.1.1"

  implementation "com.google.dagger:dagger:${dagger_version}"
  implementation "com.google.dagger:dagger-android:${dagger_version}"
  implementation "com.google.dagger:dagger-android-support:${dagger_version}"
  kapt "com.google.dagger:dagger-compiler:${dagger_version}"
  kapt "com.google.dagger:dagger-android-processor:${dagger_version}"


  implementation "io.reactivex.rxjava2:rxjava:${rx_version}"
  implementation "io.reactivex.rxjava2:rxandroid:2.1.1"

  implementation "com.squareup.retrofit2:retrofit:${retrofit_version}"
  implementation "com.squareup.retrofit2:converter-moshi:${retrofit_version}"
  implementation "com.squareup.retrofit2:adapter-rxjava2:${retrofit_version}"
  implementation "com.squareup.okhttp3:okhttp:${okhttp_version}"
  implementation "com.squareup.moshi:moshi:${moshi_version}"
  implementation "com.squareup.moshi:moshi-kotlin:${moshi_version}"
  implementation "com.squareup.moshi:moshi-adapters:${moshi_version}"

  implementation 'com.jakewharton.timber:timber:4.7.1'

  implementation 'com.github.bumptech.glide:glide:4.9.0'

  releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:${leakcanary_version}"

  debugImplementation "com.squareup.retrofit2:retrofit-mock:${retrofit_version}"
  // debugImplementation "com.squareup.leakcanary:leakcanary-android:${leakcanary_version}"
  implementation "com.squareup.okhttp3:logging-interceptor:${okhttp_version}"
  //debugImplementation 'com.facebook.stetho:stetho:1.5.0'

  // Dependencies for local unit tests
  testImplementation "junit:junit:${junit_version}"
  //testImplementation "org.mockito:mockito-all:${mockito_version}"
  testImplementation "org.mockito:mockito-core:${mockito_version}"
  testImplementation "org.hamcrest:hamcrest-all:${hamcrest_version}"
  testImplementation "android.arch.core:core-testing:${arch_component_lifecycle_version}"
  testImplementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
  testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"



  kaptAndroidTest "com.google.dagger:dagger-compiler:${dagger_version}"
  kaptAndroidTest "com.google.dagger:dagger-android-processor:${dagger_version}"

  // Android Testing Support Library's runner and rules
  androidTestImplementation "com.android.support.test:runner:${runner_version}"
  androidTestImplementation "com.android.support.test:rules:${runner_version}"
  androidTestImplementation "android.arch.persistence.room:testing:${arch_component_room_version}"
  androidTestImplementation "android.arch.core:core-testing:${arch_component_lifecycle_version}"

  // Dependencies for Android unit tests
  androidTestImplementation "junit:junit:${junit_version}"
  androidTestImplementation "org.mockito:mockito-android:2.28.2"
  //androidTestImplementation 'com.google.dexmaker:dexmaker:1.2'
  //androidTestImplementation 'com.google.dexmaker:dexmaker-mockito:1.2'

  // Espresso UI Testing
  androidTestImplementation "com.android.support.test.espresso:espresso-core:${espresso_version}"
  androidTestImplementation "com.android.support.test.espresso:espresso-contrib:${espresso_version}"
  androidTestImplementation "com.android.support.test.espresso:espresso-intents:${espresso_version}"

  // Resolve conflicts between main and test APK:
  androidTestImplementation "com.android.support:support-annotations:${support_lib_version}"
  androidTestImplementation "com.android.support:support-v4:${support_lib_version}"
  androidTestImplementation "com.android.support:appcompat-v7:${support_lib_version}"
  androidTestImplementation "com.android.support:design:${support_lib_version}"



}

def getGitHash() {
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'rev-parse', '--short', 'HEAD'
    standardOutput = stdout
  }
  return stdout.toString().trim()
}