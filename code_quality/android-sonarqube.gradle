def fileFilter = [
        '**/R.*', // android
        '**/R$*.*',
        'android/**/*.*',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*$InjectAdapter.*', // butterknife
        '**/*$ModuleAdapter.*',
        '**/*$ViewInjector*.*',
        '**/*MembersInjector*.*',
        '**/*$ViewBinder*.*',
        '**/*ViewBinding*.*',
        '**/rxscheduler/**/*.*', // rx
        '**/Lambda$*.*', // retrolambda
        '**/Lambda.*',
        '**/*Lambda.*',
        '**/*Lambda*.*',
        '**/*_MembersInjector.*', //Dagger2 generated code
        '*/*_MembersInjector*.*',
        '**/*_*Factory*.*',
        '*/*Component*.*',
        '**/*Module*.*',
        '**/component/**/*.*', // components dagger interfaces
        '**/data/qualifier/**/*.*', // dagger qualifier annotations
        '**/data/service/*.*', // retrofit interfaces,
        '**/*Test*.*',
        '**/*Activity.*',
        '**/*Fragment.*',
        '**/*View.*',
        '**/*Application.*',
        '**/lib/zxing/**/*.*'
]

sonarqube {
    properties {
        property "sonar.projectName","Hunters"
        property "sonar.login", SONAR_TOKEN
        property "sonar.host.url", "https://sonarcloud.io/"
        property "sonar.organization", "mb-projects"
        property "sonar.projectVersion", "0.0.1"


        property "sonar.exclusions", fileFilter

        property "sonar.junit.reportPaths", "build/test-results/testDebugUnitTest"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"

        property "sonar.androidLint.reportPaths", "build/reports/lint-results-debug.xml"
        //property "sonar.kotlin.detekt.reportPaths", "build/reports/detekt/detekt.xml"
    }
}

jacoco {
    toolVersion = '0.8.4'
}

task jacocoTestReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def javaDebugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/compileDebugJavaWithJavac/classes", excludes: fileFilter)
    def kotlinDebugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    getSourceDirectories().setFrom(project.files([mainSrc]))
    getClassDirectories().setFrom(project.files([javaDebugTree, kotlinDebugTree]))
    getExecutionData().setFrom(project.files('build/jacoco/testDebugUnitTest.exec'))
}

tasks.sonarqube.dependsOn jacocoTestReport